group Common;

fileHeader(ctx, file, description) ::= <<
/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * $ctx.product;format="upper"$_LICENSE file included in this $ctx.product;format="upperCase"$ distribution.
 *
 *************************************************************************
 * 
 * @file $file$
 * $description$
 *
 * This file was generated by the tool $ctx.product$gen.
 */
>>

paramDeclsByRef(params, separatorInicial) ::= <<
$if(params)$$separatorInicial$$endif$$params : {param |/*$param.comment$*/ $paramTypeByRef(typecode=param.typecode)$ $param.name$}; separator=", "$
>>

extractParams(params, separatorInicial) ::= <<
$if(params)$$separatorInicial$$endif$$params : {param | $param.name$};separator=", "$
>>

member_destructor(ctx, member) ::= <<$if(member.typecode.forwarded)$delete m_$member.name$;$elseif(ctx.generateTypesC)$$if(member.typecode.isStringType)$free(m_$member.name$);                                                                                               
m_$member.name$ = nullptr;$elseif(member.typecode.isType_f)$$if(member.typecode.contentTypeCode.isStringType)$$member_array_cstring_destructor(ctx=ctx, name=memberName(member.name), loopvar=ctx.newLoopVarName, dims=member.typecode.dimensions)$$endif$$endif$$endif$>>

/**** NEW OUR_TYPES ****/

keyFunctionHeaders(type) ::= <<
/*!
 * @brief This function returns the maximum serialized size of the Key of an object
 * depending on the buffer alignment.
 * @param current_alignment Buffer alignment.
 * @return Maximum serialized size.
 */
eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
        size_t current_alignment = 0);

/*!
 * @brief This function tells you if the Key has been defined for this type
 */
eProsima_user_DllExport static bool isKeyDefined();

/*!
 * @brief This function serializes the key members of an object using CDR serialization.
 * @param cdr CDR serialization object.
 */
eProsima_user_DllExport void serializeKey(
        eprosima::fastcdr::Cdr& cdr) const;
>>

keyFunctionHeadersStruct(ctx, parent, struct) ::= <<
$keyFunctionHeaders(struct)$
>>

keyFunctionSourcesStruct(ctx, parent, struct) ::= <<
size_t $struct.scopedname$::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;

    $if(struct.inheritances)$    $struct.inheritances : {current_align += $it.scopedname$::getKeyMaxCdrSerializedSize(current_align);}; separator="\n"$ $endif$

    $struct.members : { member | $if(member.annotationKey)$ $max_serialized_size(ctx=ctx, typecode=member.typecode, var="current_align")$ $endif$}; separator="\n"$

    return current_align;
}

bool $struct.scopedname$::isKeyDefined()
{
    $if(struct.inheritances)$    $struct.inheritances : {if ($it.scopedname$::isKeyDefined())$\n$        return true;$\n$}; separator="    else\n    "$ $endif$    return false;
}

void $struct.scopedname$::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
    $if(struct.inheritances)$    $struct.inheritances : {$it.scopedname$::serializeKey(scdr);}; separator="\n"$ $endif$
    $struct.members : { member |$if(member.annotationKey)$ $object_serialization(ctx=ctx, object=member, preffix="m_")$ $endif$ }; separator=""$
}

>>
